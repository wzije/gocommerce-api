
###
@host = http://localhost:3001/api
@email = owner@gmail.com
@password = 123456
@token = {{token}}
###

### POST Register New User
POST {{host}}/register HTTP/1.1
Content-Type: application/json

{
  "email": "testing@gmail.com",
  "password": "localhost"
}

### POST Login / Get Access Token
POST {{host}}/login HTTP/1.1
Content-Type: application/json

{
  "email": "{{email}}",
  "password": "{{password}}"
}

> {%
    //assert status code
    client.test("test login", () => {
        client.assert(response.status === 200, "can't register new user")
        client.assert(response.body.code === 200, "response code is not 200")
        client.assert(response.body.message === "login successfully", "response message is not 'login successful'")
    })
    client.global.set("token", "Bearer " + response.body.data.access_token)
%}


### GET My Profile
GET {{host}}/me HTTP/1.1
Content-Type: application/json
Authorization: {{token}}

> {%
    client.test("test", () => {
        client.assert(response.status === 200, "can't get my")
        client.assert(response.body.code === 200, "response code is not 200")
        client.assert(response.body.message === "Success", "response message is not 'Success'")
    })
%}

### GET Products
GET {{host}}/shops HTTP/1.1
Content-Type: application/json
Authorization: {{token}}

> {%
    client.test("test", () => {
        client.assert(response.status === 200, "code not 200")
        client.assert(response.body.code === 200, "response code is not 200")
        client.assert(response.body.message === "Success", "response message is not 'Success'")
    })
    client.global.set("shop_id", response.body.data[0].id)
%}


### GET Products
GET {{host}}/products HTTP/1.1
Content-Type: application/json
Authorization: {{token}}

> {%
    client.test("test", () => {
        client.assert(response.status === 200, "code not 200")
        client.assert(response.body.code === 200, "response code is not 200")
        client.assert(response.body.message === "Success", "response message is not 'Success'")
    })
    client.global.set("product_id", response.body.data[0].id)
%}

### GET Product Details
GET {{host}}/products/{{product_id}} HTTP/1.1
Content-Type: application/json
Authorization: {{token}}

> {%
    client.test("test", () => {
        client.assert(response.status === 200, "code not 200")
        client.assert(response.body.code === 200, "response code is not 200")
        client.assert(response.body.message === "Success", "response message is not 'Success'")
    })
    client.global.set("product_stock", response.body.data.stock)
%}

### GET My Order
GET {{host}}/orders HTTP/1.1
Content-Type: application/json
Authorization: {{token}}

> {%
    client.test("test", () => {
        client.assert(response.status === 200, "code not 200")
        client.assert(response.body.code === 200, "response code is not 200")
        client.assert(response.body.message === "fetch my orders", "response message is not 'fetch my orders'")
    })
%}

### POST Checkout / Create Order
POST {{host}}/orders/checkout HTTP/1.1
Content-Type: application/json
Authorization: {{token}}

{
  "shop_id": {{shop_id}},
  "shipping_address": "Yogyakarta",
  "details": [
    {
      "product_id": {{product_id}},
      "quantity": 1
    }
  ]
}

> {%
    //assert status code
    client.test("test", () => {
        client.assert(response.status === 201, "code not 201")
        client.assert(response.body.code === 201, "response code is not 201")
        client.assert(response.body.message === "order created", "response message is not 'order created'")
    })
    client.global.set("order_id", response.body.data.id)
    client.global.set("order_amount", response.body.data.amount)
%}

### POST Payment Order / Create Payment
POST {{host}}/orders/payment HTTP/1.1
Content-Type: application/json
Authorization: {{token}}

{
  "order_id": {{order_id}},
  "payment_method": "transfer",
  "amount": {{order_amount}}
}

> {%
    client.test("test", () => {
        client.assert(response.status === 201, "code not 201")
        client.assert(response.body.code === 201, "response code is not 201")
        client.assert(response.body.message === "payment order created", "response message is not 'payment order created'")
    })
%}

### GET Show My Warehouse
GET {{host}}/warehouses HTTP/1.1
Content-Type: application/json
Authorization: {{token}}

> {%
    client.test("test", () => {
        client.assert(response.status === 200, "code not 200")
        client.assert(response.body.code === 200, "response code is not 200")
        client.assert(response.body.message === "Success", "response message is not 'Success'")

    })
    let whs = []
    let pID = parseInt(client.global.get('product_id'))
    let whID = response.body.data.forEach((w) => w.warehouse_inventory.forEach((wi) => {
        if (wi.product_id === pID) {
            whs.push(wi)
        }
    }))
    client.log(whs[0])
    client.global.set("warehouse_product_id", whs[0].product_id)
    client.global.set("first_warehouse_id", whs[0].warehouse_id)

%}

### POST Increase product stock in the specific warehouse
POST {{host}}/warehouses/inventories/increase HTTP/1.1
Content-Type: application/json
Authorization: {{token}}

{
  "product_id": {{product_id}},
  "warehouse_id": {{first_warehouse_id}},
  "quantity": 1
}

> {%
    //assert status code
    client.test("test", () => {
        client.assert(response.status === 201, "code not 201")
        client.assert(response.body.code === 201, "response code is not 201")
        client.assert(response.body.message === "increase stock successfully", "response message is not 'increase stock successfully'")
    })
%}

### recheck stock
### GET Product Details
GET {{host}}/products/{{product_id}} HTTP/1.1
Content-Type: application/json
Authorization: {{token}}

> {%
    let firstStock = client.global.get("product_stock")
    let expectStock = parseInt(firstStock) //after checkout
    let currentStock = parseInt(response.body.data.stock)
    client.test("test", () => {
        client.assert(response.status === 200, "code not 200")
        client.assert(response.body.code === 200, "response code is not 200")
        client.assert(response.body.message === "Success", "response message is not 'Success'")
        client.assert(expectStock === currentStock)
    })
    client.global.set("product_last_stock", response.body.data.stock)
    console.log(expectStock, currentStock);
%}

### POST Decrease product stock in the specific warehouse
POST {{host}}/warehouses/inventories/reduce HTTP/1.1
Content-Type: application/json
Authorization: {{token}}

{
  "product_id": {{product_id}},
  "warehouse_id": {{first_warehouse_id}},
  "quantity": 1
}

> {%
    //assert status code
    client.test("test", () => {
        client.assert(response.status === 201, "code not 201")
        client.assert(response.body.code === 201, "response code is not 201")
        client.assert(response.body.message === "reduce stock successfully", "response message is not 'reduce stock successfully'")
    })
%}

### recheck stock
### GET Product Details
GET {{host}}/products/{{product_id}} HTTP/1.1
Content-Type: application/json
Authorization: {{token}}

> {%
    let lastStock = client.global.get("product_last_stock")
    let expectStock = parseInt(lastStock) - 1
    let currentStock = parseInt(response.body.data.stock)
    client.test("test", () => {
        client.assert(response.status === 200, "code not 200")
        client.assert(response.body.code === 200, "response code is not 200")
        client.assert(response.body.message === "Success", "response message is not 'Success'")
        client.assert(expectStock === currentStock)
    })
    console.log(expectStock, currentStock);
    client.global.set("product_current_stock", response.body.data.stock)
%}

#### create new Warehouse
POST {{host}}/warehouses/create HTTP/1.1
Content-Type: application/json
Authorization: {{token}}

{
  "name": "New Warehouse",
  "shop_id": {{shop_id}},
  "location": "Jakarta"
}

> {%
    client.test("test", () => {
        client.assert(response.status === 201, "code not 201")
        client.assert(response.body.code === 201, "response code is not 201")
        client.assert(response.body.message === "create new warehouse successfully", "response message is not 'create new warehouse successfully'")
    })

    client.global.set("new_warehouse_id", response.body.data.id)
%}

### POST Transfer product stock in the specific warehouse
POST {{host}}/warehouses/inventories/transfer HTTP/1.1
Content-Type: application/json
Authorization: {{token}}

{
  "source_warehouse_id": {{first_warehouse_id}},
  "target_warehouse_id": {{new_warehouse_id}},
  "product_id": {{product_id}},
  "quantity": 10
}

> {%
    //assert status code
    client.test("test", () => {
        client.assert(response.status === 201, "code not 201")
        client.assert(response.body.code === 201, "response code is not 201")
        client.assert(response.body.message === "transfer stock successfully", "response message is not 'transfer stock successfully'")
    })
%}

#### POST Change status Warehouse
POST {{host}}/warehouses/{{first_warehouse_id}}/status?is_active=false HTTP/1.1
Content-Type: application/json
Authorization: {{token}}

> {%
    //assert status code
    client.test("test", () => {
        client.assert(response.status === 201, "code not 201")
        client.assert(response.body.code === 201, "response code is not 201")
        client.assert(response.body.message === "update warehouse status successfully", "response message is not 'update warehouse status successfully'")
    })
%}

#### POST Change status Warehouse
GET {{host}}/warehouses/{{first_warehouse_id}} HTTP/1.1
Content-Type: application/json
Authorization: {{token}}

> {%
    //assert status code
    client.test("test", () => {
        client.assert(response.status === 200, "code not 200")
        client.assert(response.body.code === 200, "response code is not 200")
        client.assert(response.body.message === "Success", "response message is not 'update warehouse status successfully'")
        client.assert(response.body.data.is_active === false, "warehouse is active")
    })
%}


### POST Recheck Increase product when warehouse inactive
POST {{host}}/warehouses/inventories/increase HTTP/1.1
Content-Type: application/json
Authorization: {{token}}

{
  "product_id": {{product_id}},
  "warehouse_id": {{first_warehouse_id}},
  "quantity": 1
}

> {%
    //assert status code
    client.test("test", () => {
        client.assert(response.status === 500, "code not 500")
        client.assert(response.body.code === 500, "response code is not 500")
        client.assert(response.body.message === "warehouse is not active", "response message is not 'warehouse is not active'")
    })
%}

### POST Recheck reduce product when warehouse inactive
POST {{host}}/warehouses/inventories/reduce HTTP/1.1
Content-Type: application/json
Authorization: {{token}}

{
  "product_id": {{product_id}},
  "warehouse_id": {{first_warehouse_id}},
  "quantity": 1
}

> {%
    //assert status code
    client.test("test", () => {
        client.assert(response.status === 500, "code not 500")
        client.assert(response.body.code === 500, "response code is not 500")
        client.assert(response.body.message === "warehouse is not active", "response message is not 'warehouse is not active'")
    })
%}

### POST Recheck Transfer product stock when warehouse is not acitve
POST {{host}}/warehouses/inventories/transfer HTTP/1.1
Content-Type: application/json
Authorization: {{token}}

{
  "source_warehouse_id": {{first_warehouse_id}},
  "target_warehouse_id": {{new_warehouse_id}},
  "product_id": {{product_id}},
  "quantity": 1
}

> {%
    //assert status code
    client.test("test", () => {
        client.assert(response.status === 500, "code not 500")
        client.assert(response.body.code === 500, "response code is not 500")
        client.assert(response.body.message === "source warehouse is not active", "response message is not 'source warehouse is not active'")
    })
%}

#### POST Back status Warehouse to TRUE
POST {{host}}/warehouses/{{first_warehouse_id}}/status?is_active=true HTTP/1.1
Content-Type: application/json
Authorization: {{token}}





